on: 
  push:
    branches:
      - publish-test

jobs:
  publish-components:
    name: Publish Components to Pipedream Registry
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.publish.outputs.json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install pd cli
        env:
          PD_API_KEY: ${{ secrets.PD_API_KEY }}
        run: |
          curl -O https://cli.pipedream.com/linux/amd64/latest/pd.zip
          unzip pd.zip
          mkdir -p $HOME/.config/pipedream
          echo "api_key = $PD_API_KEY" > $HOME/.config/pipedream/config
      - name: Get Changed Files
        id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'csv'
      - name: Publish and add to registry components/*.js (that aren't .app.js files)
        id: publish
        env:
          PD_API_KEY: ${{ secrets.PD_API_KEY }}
          ENDPOINT: ${{ secrets.ENDPOINT }}
        shell: bash {0} # don't fast fail
        run: |
          UNPUBLISHED=("UNPUBLISHED1","UNPUBLISHED2")
          PUBLISHED=("PUBLISHED1","PUBLISHED2")
          ERRORS=("ERROR1",ERROR2")
          #mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
          added_modified_files=()
          for added_modified_file in "${added_modified_files[@]}"; do
            # starts with components, ends with .js and not app.js
            if [[ $added_modified_file == components/* ]] && [[ $added_modified_file == *.js ]] && [[ $added_modified_file != *.app.js ]]
            then
              echo "attempting to publish ${added_modified_file}"
              PD_OUTPUT=`./pd publish ${added_modified_file} --json`
              if [ $? -eq 0 ]
              then
                KEY=`echo $PD_OUTPUT | jq -r ".key"`
                echo "published ${KEY}"
                echo "${KEY} will be added to the registry"
                curl "https://api.pipedream.com/graphql" -H "Content-Type: application/json" -H "Authorization: Bearer ${PD_API_KEY}" --data-binary $'{"query":"mutation($key: String\u0021, $registry: Boolean\u0021){\\n  setComponentRegistry(key: $key, registry: $registry){\\n    savedComponent{\\n      id\\n      key\\n    }\\n  }\\n}","variables":{"key":"'${KEY}'","registry":'true'}}'
              else
                ERROR=`echo $PD_OUTPUT | jq -r ".error"`
                ERROR_MESSAGE="${ERROR} with ${added_modified_file}"
                echo $ERROR_MESSAGE
                ERRORS+=${ERROR_MESSAGE}"
                UNPUBLISHED+=${added_modified_file}
                # add to array to spit out later
              fi
            else
              echo "${added_modified_file} will not be added to the registry"
            fi
          done
          # print out everything that didn't publish
          if [ ${#UNPUBLISHED[@]} -ne 0 ]; then
            echo "the following files were not published"
            printf '%s\n' "${UNPUBLISHED[@]}"
          fi
          # build json and curl
          #          jq -n --arg errors $ERRORS --arg published $PUBLISHED --arg unpublished $UNPUBLISHED '{ published: $published, unpublished: $unpublished, errors: $errors }' > results.json
          #curl -H "Content-Type: application/json" -H "PD-FROM: publish-step" --data @results.json $ENDPOINT
          #JSON=`cat results.json`
          #echo "::set-output name=json::${JSON}"
      - name: Remove pd cli config
        run: |
          rm $HOME/.config/pipedream/config
      - name: send published notification
        uses: joelwmale/webhook-action@master
        with:
          url : ${{ secrets.ENDPOINT }}
          headers: '{"Content-Type: "application/json", "PD-FROM": "wh step" }'
          body: ${{ steps.publish.outputs.json }}
